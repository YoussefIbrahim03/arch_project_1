
//0.
//initial begin
//mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0) 
//mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0) 
//mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0) 
//mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2 
//mem[4]=32'b0_000000_00011_00100_000_0100_0_1100011; //beq x4, x3, 4 
//mem[5]=32'b0000000_00010_00001_000_00011_0110011 ; //add x3, x1, x2 
//mem[6]=32'b0000000_00010_00011_000_00101_0110011 ; //add x5, x3, x2 
//mem[7]=32'b0000000_00101_00000_010_01100_0100011; //sw x5, 12(x0) 
//mem[8]=32'b000000001100_00000_010_00110_0000011 ; //lw x6, 12(x0) 
//mem[9]=32'b0000000_00001_00110_111_00111_0110011 ; //and x7, x6, x1 
//mem[10]=32'b0100000_00010_00001_000_01000_0110011 ; //sub x8, x1, x2 
//mem[11]=32'b0000000_00010_00001_000_00000_0110011 ; //add x0, x1, x2 
//mem[12]=32'b0000000_00001_00000_000_01001_0110011 ; //add x9, x0, x1
//end

//1.fence.tso
//initial begin
//mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0) 
//mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0) 
//mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0) 
//mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2 
//mem[4]=32'b0_000000_00011_00100_000_0100_0_1100011; //beq x4, x3, 4 
//mem[5]=32'b0000000_00010_00001_000_00011_0110011 ; //add x3, x1, x2 
//mem[6]=32'b0000000_00010_00011_000_00101_0110011 ; //add x5, x3, x2 
//mem[7]=32'b0000000_00101_00000_010_01100_0100011; //sw x5, 12(x0) 
//mem[8]=32'b000000001100_00000_010_00110_0000011 ; //lw x6, 12(x0) 
//mem[9]=32'b1000_0011_0011_00000_000_00000_0001111 ; //fence.tso 
//mem[10]=32'b0100000_00010_00001_000_01000_0110011 ; //sub x8, x1, x2 
//mem[11]=32'b0000000_00010_00001_000_00000_0110011 ; //add x0, x1, x2 
//mem[12]=32'b0000000_00001_00000_000_01001_0110011 ; //add x9, x0, x1
//end


//2. ecall
//initial begin
//mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0) 
//mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0) 
//mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0) 
//mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2 
//mem[4]=32'b0_000000_00011_00100_000_0100_0_1100011; //beq x4, x3, 4 
//mem[5]=32'b0000000_00010_00001_000_00011_0110011 ; //add x3, x1, x2 
//mem[6]=32'b0000000_00010_00011_000_00101_0110011 ; //add x5, x3, x2 
//mem[7]=32'b0000000_00101_00000_010_01100_0100011; //sw x5, 12(x0) 
//mem[8]=32'b000000001100_00000_010_00110_0000011 ; //lw x6, 12(x0) 
//mem[9]=32'b0000_0000_0000_00000_000_00000_1110011 ; //ecall 
//mem[10]=32'b0100000_00010_00001_000_01000_0110011 ; //sub x8, x1, x2 
//mem[11]=32'b0000000_00010_00001_000_00000_0110011 ; //add x0, x1, x2 
//mem[12]=32'b0000000_00001_00000_000_01001_0110011 ; //add x9, x0, x1
//end


//3.jal
initial begin
mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0) 
mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0) 
mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0) 
mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2 
mem[4]=32'b0_0000000100_0_00000000_00111_1101111; // jal x7, 8
mem[5]=32'b0000000_00010_00001_000_00011_0110011 ; //add x3, x1, x2 
mem[6]=32'b0000000_00010_00011_000_00101_0110011 ; //add x5, x3, x2 
mem[7]=32'b0000000_00101_00000_010_01100_0100011; //sw x5, 12(x0) 
mem[8]=32'b000000001100_00000_010_00110_0000011 ; //lw x6, 12(x0) 
mem[9]=32'b0000_0000_0000_00000_000_00000_1110011 ; //ecall 
mem[10]=32'b0100000_00010_00001_000_01000_0110011 ; //sub x8, x1, x2 
mem[11]=32'b0000000_00010_00001_000_00000_0110011 ; //add x0, x1, x2 
mem[12]=32'b0000000_00001_00000_000_01001_0110011 ; //add x9, x0, x1
end

//4.lui
//initial begin
//mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0) 
//mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0) 
//mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0) 
//mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2 
//mem[4]=32'b0_000000000_00000_0100_000111_0110111; // lui x7, 8
//mem[5]=32'b0000000_00010_00001_000_00011_0110011 ; //add x3, x1, x2 
//mem[6]=32'b0000000_00010_00011_000_00101_0110011 ; //add x5, x3, x2 
//mem[7]=32'b0000000_00101_00000_010_01100_0100011; //sw x5, 12(x0) 
//mem[8]=32'b000000001100_00000_010_00110_0000011 ; //lw x6, 12(x0) 
//mem[9]=32'b0000_0000_0000_00000_000_00000_1110011 ; //ecall 
//mem[10]=32'b0100000_00010_00001_000_01000_0110011 ; //sub x8, x1, x2 
//mem[11]=32'b0000000_00010_00001_000_00000_0110011 ; //add x0, x1, x2 
//mem[12]=32'b0000000_00001_00000_000_01001_0110011 ; //add x9, x0, x1
//end

//5.auipc                                                                 
//initial begin                                                           
//mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0)        
//mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0)        
//mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0)        
//mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2      
//mem[4]=32'b00000000000000001000_00111_0010111; // auipc x7, 8          
//mem[5]=32'b0000000_00010_00001_000_00011_0110011 ; //add x3, x1, x2     
//mem[6]=32'b0000000_00010_00011_000_00101_0110011 ; //add x5, x3, x2      
//mem[7]=32'b0000000_00101_00000_010_01100_0100011; //sw x5, 12(x0)       
//mem[8]=32'b000000001100_00000_010_00110_0000011 ; //lw x6, 12(x0)       
//mem[9]=32'b0000_0000_0000_00000_000_00000_1110011 ; //ecall             
//mem[10]=32'b0100000_00010_00001_000_01000_0110011 ; //sub x8, x1, x2    
//mem[11]=32'b0000000_00010_00001_000_00000_0110011 ; //add x0, x1, x2    
//mem[12]=32'b0000000_00001_00000_000_01001_0110011 ; //add x9, x0, x1    
//end                

//6. jalr                                                               
//initial begin                                                           
//mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0)        
//mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0)        
//mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0)        
//mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2      
//mem[4]=32'b000000001000_00010_000_00111_1100111; // jalr x7, x2, 8      
//mem[5]=32'b0000000_00010_00001_000_00011_0110011 ; //add x3, x1, x2     
//mem[6]=32'b0000000_00010_00011_000_00101_0110011 ; //add x5, x3, x2     
//mem[7]=32'b0000000_00101_00000_010_01100_0100011; //sw x5, 12(x0)       
//mem[8]=32'b000000001100_00000_010_00110_0000011 ; //lw x6, 12(x0)       
//mem[9]=32'b0000_0000_0000_00000_000_00000_1110011 ; //ecall             
//mem[10]=32'b0100000_00010_00001_000_01000_0110011 ; //sub x8, x1, x2    
//mem[11]=32'b0000000_00010_00001_000_00000_0110011 ; //add x0, x1, x2    
//mem[12]=32'b0000000_00001_00000_000_01001_0110011 ; //add x9, x0, x1    
//end                                                                  


//7.branching true
//initial begin
//mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0)        
//mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0)        
//mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0)        
//mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2
//mem[4]=32'b0_000000_00011_00100_000_0100_0_1100011; //beq x4, x3, 4
//mem[5]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1
//mem[6]=32'b0_000000_00001_00100_001_0100_0_1100011; //bne x4, x3, 4
//mem[7]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1 
//mem[8]=32'b0_000000_00011_00010_100_0100_0_1100011; //blt x4, x3, 4
//mem[9]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1 
//mem[10]=32'b0_000000_00011_00100_101_0100_0_1100011; //bge x4, x3, 4
//mem[11]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1 
//mem[12]=32'b0_000000_00011_00010_110_0100_0_1100011; //bltu x4, x3, 4
//mem[13]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1
//mem[14]=32'b0_000000_00011_00100_111_0100_0_1100011; //bgeu x4, x3, 4
//mem[15]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1  
//end  

//7.branching false
//initial begin
//mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0)        
//mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0)        
//mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0)        
//mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2
//mem[4]=32'b0_000000_00001_00100_000_0100_0_1100011; //beq x4, x3, 4
//mem[5]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1
//mem[6]=32'b0_000000_00001_00001_001_0100_0_1100011; //bne x4, x3, 4
//mem[7]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1 
//mem[8]=32'b0_000000_00001_00011_100_0100_0_1100011; //blt x4, x3, 4
//mem[9]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1 
//mem[10]=32'b0_000000_00001_00010_101_0100_0_1100011; //bge x4, x3, 4
//mem[11]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1 
//mem[12]=32'b0_000000_00010_00011_110_0100_0_1100011; //bltu x4, x3, 4
//mem[13]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1
//mem[14]=32'b0_000000_00001_00010_111_0100_0_1100011; //bgeu x4, x3, 4
//mem[15]=32'b000000000001_00101_000_00101_0010011; //addi x5,x5,1  
//end  
                                                     
//8. all i type
//initial begin
//mem[0]=32'b000000000101_00001_000_00001_0010011; //addi x1,x1,5
//mem[1]=32'b000000000001_00001_010_00001_0010011; //slti x1,x1,1
//mem[2]=32'b000000000000_00001_011_00001_0010011; //sltiu x1,x1,0
//mem[3]=32'b000000000001_00001_100_00001_0010011; //xori x1,x1,1
//mem[4]=32'b000000000001_00001_110_00001_0010011; //ori x1,x1,1
//mem[5]=32'b000000000001_00001_111_00001_0010011; //andi x1,x1,1
//mem[6]=32'b000000000001_00001_001_00001_0010011; //slli x1,x1,1
//mem[7]=32'b000000000001_00001_101_00001_0010011; //srli x1,x1,1
//mem[8]=32'b111111101011_00001_000_00001_0010011;//addi x1,x1,-20
//mem[9]=32'b010000000001_00001_101_00001_0010011; //srai x1,x1,1
//mem[10]=32'b000000000001_00001_000_00001_0010011; //addi x1,x1,1
//mem[11]=32'b000000000001_00001_000_00001_0010011;//addi x1,x1,1
//mem[12]=32'b000000000001_00001_000_00001_0010011;//addi x1,x1,1
//end

//9.all r inst
//initial begin
//mem[0]=32'b000000000101_00001_000_00001_0010011; //addi x1,x1,5
//mem[1]=32'b000000000101_00010_000_00010_0010011; //addi x2,x2,5
//mem[2]=32'b000000000001_00011_000_00011_0010011; //addi x3,x3,1
//mem[3]=32'b0000000_00001_00000_000_01001_0110011 ; //add x9, x0, x1
//mem[4]=32'b0100000_00001_00000_000_01001_0110011 ; //sub x9, x0, x1
//mem[5]=32'b0000000_00001_00001_001_01001_0110011 ; //sll x9, x1, x1
//mem[6]=32'b0000000_00001_00000_010_01001_0110011 ; //slt x9, x0, x1
//mem[7]=32'b0000000_00001_00000_011_01001_0110011 ; //sltu x9, x0, x1
//mem[8]=32'b0000000_00001_00000_100_01001_0110011 ; //xor x9, x0, x1
//mem[9]=32'b0000000_00011_00001_101_01001_0110011 ; //srl x9, x1, x3
//mem[10]=32'b0100000_00011_00001_101_01001_0110011 ; //sra x9, x1, x3
//mem[11]=32'b0000000_00001_00000_110_01001_0110011 ; //or x9, x0, x1
//mem[12]=32'b0000000_00001_00000_111_01001_0110011 ; //and x9, x0, x1
//end


//all load and store instructions
//initial begin
//mem[0]=32'b000000000000_00000_000_00001_0000011; //lb x1, 0(x0)
//mem[1]=32'b000000000000_00000_001_00010_0000011; //lh x2,0(x0)
//mem[2]=32'b000000000000_00000_010_00011_0000011; //lw x3,0(x0)
//mem[3]=32'b0000000_00000_00000_100_00100_0000011 ; //lbu x4,0(x0)
//mem[4]=32'b0100000_00000_00000_101_00101_0000011 ; //lhu x5,0(x0)
//mem[5]=32'b0000000_00001_00000_000_01100_0100011 ; //sb x1, 12(x0)
//mem[6]=32'b0000000_00100_00000_001_01101_0100011 ; //sh x4, 13(x0)
//mem[7]=32'b0000000_00101_00000_010_01111_0100011 ; //sw x5, 15(x0)
//end




